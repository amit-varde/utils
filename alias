#My Aliases


# Directories#
export DOCS="$HOME/Documents"
export DL="$HOME/Downloads"
export WORK="$HOME/work"
export UTILS="$WORK/utils"
export JNBS="$WORK/jupyter-notebooks"

#Going to the dirs
alias w='cd $WORK'
alias docs='cd $DOCS'
alias dl='cd $DL'
alias utils='cd $UTLS'


## changing file permissions
alias lock='chmod -R 700'
alias unlock='chmod -R 755'
alias mkexe='chmod -R 755'

# ls
alias lr='ls -lrt'
alias la='ls -a'
alias l1='ls -1'
alias rd='rm -rf'
alias rz='rm *~'
alias rx='rm #*#'
alias up='cd ..'

alias x='exit'
alias c='clear'
alias m='more'
alias h='head -20'
alias t='tail -20'
alias g='grep -i'

################################################################################
## PYENV
# Install PYENV and .env both
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"

check_path() { echo "$PATH" | tr ':' '\n'; }

clean_pycache() {
    find . -type d -name "__pycache__" -exec rm -rf {} +
}
################################################################################
# Python related aliases
# Function to pretty print Python version and location
mypy() {
    python_path=$(which python)
    python_version=$(python --version 2>&1)
    echo "Python executable: $python_path"
    echo "Python version: $python_version"
    
    pip_path=$(which pip)
    pip_version=$(pip --version 2>&1)
    echo "Pip executable: $pip_path"
    echo "Pip version: $pip_version"

    if [ -z "$VIRTUAL_ENV" ]; then
        echo "No virtual environment is currently activated."
    else
        echo "Current virtual environment: $VIRTUAL_ENV"
    fi
}

# Function to change the prompt to %~>
change_prompt() {
    local current_dir=$(basename "$PWD")
    export PROMPT="($current_dir) %~> "
}

# This script defines a function `go_project` that navigates to a specified project directory,
# activates its virtual environment if available, sources an environment file if it exists,
# runs `mypy` for type checking, and changes the shell prompt.
#
# Usage:
#   go_project <project_name>
#
# Arguments:
#   project_name: The name of the project to navigate to.
#
# The script also defines two aliases:
#   go_eda_schema_internal: Navigates to the 'eda_schema_internal' project.
#   go_ohm: Navigates to the 'ohm' project.
#
# Error Handling:
#   - If no project name is provided, an error message is displayed.
#   - If the specified project directory does not exist, an error message is displayed.
go_project() {
    [ -z "$1" ] && { echo "Error: No project name provided."; return 1; }
    local project_name="$1"
    [ ! -d "$WORK/$project_name" ] && { echo "Error: Project '$project_name' does not exist under $WORK."; return 1; }
    cd "$WORK/$project_name" || return 1
    [ -f venv/bin/activate ] && source venv/bin/activate
    [ -f "${project_name}.env" ] && source "${project_name}.env"
    #show the env
    mypy
    change_prompt
}
alias go_eda_schema_internal='go_project eda_schema_internal'
alias go_ohm='go_project ohm'
alias go_utils='go_project utils'

################################################################################
#
# Function to launch Jupyter Notebook
jupyter_notebook() {
    local notebook_dir="$JNBS"
    if [ -z "$notebook_dir" ]; then
        notebook_dir="."
    fi
    if [ ! -d "$notebook_dir" ]; then
        echo "Directory $notebook_dir does not exist."
        return 1
    fi
    cd "$notebook_dir" || return 1
    echo "Launching Jupyter Notebook in directory: $notebook_dir"
    jupyter notebook
}

################################################################################
# Setup Drexel Environment for my use.
dxl() {
    export PATH="/usr/local/opt/graphviz/bin:$PATH"
}

# Let this always be the last line
[ -d "$WORK" ] && cd "$WORK" || cd "$HOME"
PROMPT="%n@%m:%~> "
echo "Loaded amit's alias file"
